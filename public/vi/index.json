[
{
	"uri": "//localhost:1313/vi/",
	"title": "AWS CloudWatch Workshop",
	"tags": [],
	"description": "",
	"content": "AWS CloudWatch Workshop Tổng quan ℹ️ Information: Amazon CloudWatch là dịch vụ theo dõi và quản lý cung cấp dữ liệu và thông tin định hướng hành động cho tài nguyên cơ sở hạ tầng và ứng dụng AWS, ứng dụng hybrid cũng như ứng dụng on-premises. Bạn có thể thu thập và truy cập tất cả dữ liệu về hiệu năng và hoạt động dưới hình thức logs và metrics trong cùng một nền tảng, thay vì theo dõi riêng lẻ (máy chủ, mạng hoặc cơ sở dữ liệu). CloudWatch cho phép bạn theo dõi end-to-end (ứng dụng, cơ sở hạ tầng và dịch vụ) và tận dụng cảnh báo, logs và dữ liệu sự kiện để tự động hóa các hành động và giảm Mean Time To Resolution (MTTR). Dịch vụ này giúp bạn giải phóng tài nguyên quan trọng và tập trung vào việc xây dựng các ứng dụng và giá trị kinh doanh.\nTính năng chính CloudWatch cung cấp thông tin định hướng hành động, hỗ trợ việc tối ưu hóa hiệu năng ứng dụng, quản lý sử dụng tài nguyên và hiểu rõ tình trạng hoạt động của toàn hệ thống. CloudWatch hiển thị dữ liệu metrics và logs chi tiết đến từng giây, lưu trữ dữ liệu trong 15 tháng (đối với metrics) và cho phép thực hiện các phép tính trên metrics.\n💡 Pro Tip: Dịch vụ này cũng giúp bạn phân tích dựa trên dữ liệu lịch sử nhằm tối ưu hóa chi phí và thu thập thông tin real-time để tối ưu hóa ứng dụng và tài nguyên cơ sở hạ tầng.\nContainer Insights ℹ️ Information: CloudWatch Container Insights cho phép bạn theo dõi, khắc phục sự cố và thiết lập cảnh báo cho các ứng dụng và microservices chạy trong containers. CloudWatch thu thập, tổng hợp và tóm tắt thông tin sử dụng tài nguyên tính toán (như CPU, bộ nhớ, ổ đĩa và dữ liệu mạng) cũng như thông tin chẩn đoán (như lỗi khi khởi động lại container) nhằm giúp kỹ sư DevOps cô lập và giải quyết sự cố một cách nhanh chóng.\n🔒 Security Note: Container Insights cung cấp cho bạn thông tin chi tiết từ các dịch vụ quản lý container như Amazon EKS (Elastic Kubernetes Service), Amazon ECS (Elastic Container Service), AWS Fargate và Kubernetes (K8s) độc lập, giúp bạn duy trì tính khả dụng và bảo mật cho các ứng dụng containerized.\nLợi ích chính 💡 Pro Tip: Với Amazon CloudWatch, bạn có thể:\nGiám sát toàn diện các tài nguyên AWS và ứng dụng của bạn Thiết lập cảnh báo thông minh dựa trên ngưỡng tùy chỉnh Tự động hóa phản hồi đối với các sự cố hoạt động Tạo bảng điều khiển trực quan để theo dõi hiệu suất Phân tích logs để khắc phục sự cố nhanh chóng ⚠️ Warning: Việc không thiết lập giám sát đầy đủ có thể dẫn đến thời gian ngừng hoạt động không lường trước, hiệu suất kém và chi phí cao hơn do sử dụng tài nguyên không hiệu quả.\nNội dung Giới thiệu Các bước chuẩn bị CloudWatch Metric CloudWatch Logs CloudWatch Alarm CloudWatch Dashboard Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/4-cloud-watch-logs/4.1-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs ℹ️ Information: Amazon CloudWatch Logs cho phép bạn tập trung và phân tích logs từ các tài nguyên AWS, giúp bạn hiểu rõ hơn về hoạt động của hệ thống và khắc phục sự cố nhanh chóng.\nTrong trang chính của CloudWatch.\nPhần menu bên trái, mở rộng mục Logs Chọn Log groups Trên thanh tìm kiếm, nhập /ec2 và chọn /ec2/linux/var/log/messages 💡 Pro Tip: Sử dụng thanh tìm kiếm giúp bạn nhanh chóng tìm thấy các log groups cụ thể trong môi trường có nhiều tài nguyên, tiết kiệm thời gian phân tích.\nChọn một instance bất kỳ để xem chi tiết logs Trong giao diện logs, bạn có thể thấy các bản ghi từ instance này được tạo ra từ nhiều nguồn khác nhau như: dhclient, NET, ec2net, systemd\u0026hellip; ℹ️ Information: Các logs này cung cấp thông tin chi tiết về hoạt động của hệ thống, giúp bạn theo dõi các sự kiện, phát hiện lỗi và hiểu rõ hơn về cách hệ thống đang hoạt động.\nTrở lại thông tin của log group /ec2/linux/var/log/messages. Bây giờ chúng ta sẽ cấu hình thời gian lưu trữ (retention) cho các log events\nMở rộng menu Actions Chọn Edit retention setting Trong phần Retention setting, chọn 1 week (7 days) cho Expire events after ⚠️ Warning: Việc cấu hình thời gian lưu trữ logs là rất quan trọng để tối ưu chi phí. Logs lưu trữ quá lâu sẽ làm tăng chi phí lưu trữ, trong khi thời gian lưu trữ quá ngắn có thể khiến bạn mất dữ liệu quan trọng khi cần phân tích sự cố.\n🔒 Security Note: Đối với các môi trường yêu cầu tuân thủ quy định, bạn nên xem xét các yêu cầu về thời gian lưu trữ logs trước khi thiết lập chính sách retention.\n💡 Pro Tip: Bạn có thể xuất logs sang Amazon S3 để lưu trữ dài hạn với chi phí thấp hơn, đồng thời vẫn duy trì khả năng truy xuất khi cần thiết.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: Trong bài lab này chúng ta sẽ thực hành với Amazon CloudWatch, một dịch vụ giám sát và quản lý hiệu suất toàn diện của AWS. Workshop sẽ hướng dẫn bạn thông qua các thao tác sau:\nThực hành với CloudWatch Metrics được gửi từ các ứng dụng mẫu đang chạy trên các Amazon EC2 Instances đã được cấu hình sẵn. Phân tích CloudWatch Logs từ các ứng dụng trên EC2 Instances và tạo Metrics Filters từ dữ liệu logs. Thiết lập CloudWatch Alarms dựa trên các ngưỡng Metrics để nhận thông báo kịp thời. Xây dựng CloudWatch Dashboard tích hợp Custom Metrics và Alarms để tạo góc nhìn tổng quan về hệ thống. 💡 Pro Tip: Workshop này đặc biệt phù hợp cho các kỹ sư hệ thống và DevOps muốn nắm vững cách sử dụng CloudWatch để giám sát hệ thống. Bạn sẽ học cách xây dựng hệ thống quan sát (Observability) hiệu quả, giúp phát hiện sớm các vấn đề tiềm ẩn và tối ưu hóa hiệu suất ứng dụng.\n🔒 Security Note: Việc thiết lập giám sát đúng cách với CloudWatch không chỉ giúp tối ưu hiệu suất mà còn là một phần quan trọng trong chiến lược bảo mật, giúp phát hiện các hoạt động bất thường trong hệ thống của bạn.\n"
},
{
	"uri": "//localhost:1313/vi/3-cloud-watch-metric/3.1-view-metrics/",
	"title": "Xem các Metrics",
	"tags": [],
	"description": "",
	"content": "Xem các Metrics ℹ️ Information: Trong phần này, chúng ta sẽ thực hành cách xem và phân tích các metrics trong Amazon CloudWatch, giúp bạn hiểu rõ hơn về hiệu suất của các tài nguyên AWS.\nTruy cập AWS Management Console\nTìm kiếm dịch vụ CloudWatch trong thanh tìm kiếm Chọn CloudWatch từ kết quả tìm kiếm Trong giao diện CloudWatch\nMở rộng phần Metrics ở menu bên trái Chọn All metrics Trong giao diện biểu đồ metrics, nhập EC2 vào ô tìm kiếm Từ kết quả tìm kiếm, chọn EC2 \u0026gt; Per-Instance Metrics Trên thanh tìm kiếm, nhập CPUUtilization và tìm kiếm 💡 Pro Tip: Khi sử dụng thanh tìm kiếm, CloudWatch mặc định sẽ tìm theo Metric name, giúp bạn nhanh chóng lọc ra các metrics cụ thể cần theo dõi.\nChọn 2 trong số 5 instances được tạo ra từ CloudFormation stack để so sánh thông số CPUUtilization ℹ️ Information: Từ biểu đồ, chúng ta có thể thấy cả hai instances bắt đầu hoạt động mạnh vào khoảng 2:40, đây là thời điểm có mức sử dụng CPU cao nhất. Sau đó, mức sử dụng CPU giảm dần và ổn định vào khoảng 3:30, cho thấy các instances đã hoàn thành phần lớn công việc được giao.\nTiếp theo, chúng ta sẽ xem các metrics khác của cùng một Instance\nBỏ chọn dòng của Instance B Xóa tag tìm kiếm CPUUtilization Nhập EBSWriteBytes vào thanh tìm kiếm Kéo xuống và chọn Instance A 💡 Pro Tip: Khi phân tích nhiều metrics cùng lúc, bạn có thể thấy mối tương quan giữa các hoạt động khác nhau của instance. Trong trường hợp này, chúng ta thấy rằng hoạt động ghi vào EBS và mức sử dụng CPU có mối tương quan trong giai đoạn đầu khi instance khởi động, nhưng không hoàn toàn trùng khớp ở tất cả các thời điểm.\nBạn có thể ẩn một trong hai metrics để xem chi tiết hơn.\n⚠️ Warning: Khi hiển thị nhiều metrics có đơn vị đo khác nhau trên cùng một biểu đồ, việc phân tích có thể trở nên khó khăn. Trong phần tiếp theo, chúng ta sẽ tìm hiểu cách tùy chỉnh biểu đồ để có cái nhìn trực quan hơn.\nThao tác với biểu đồ ℹ️ Information: CloudWatch cho phép bạn tùy chỉnh biểu đồ để hiển thị dữ liệu một cách hiệu quả hơn, đặc biệt khi so sánh các metrics có đơn vị đo và phạm vi giá trị khác nhau.\nTrong tab Graphed metrics, tại dòng EBSWriteBytes, cột Y axis, chọn \u0026gt; để chuyển metric này sang trục Y thứ hai Thêm đánh dấu ngang (horizontal annotation) cho biểu đồ\nChuyển sang tab Options Chọn Add horizontal annotation Cấu hình horizontal annotation với các thông tin sau:\nLabel: 5% Mark Value: 5 💡 Pro Tip: Sử dụng annotations để đánh dấu các ngưỡng quan trọng giúp bạn dễ dàng xác định khi nào metrics vượt quá hoặc giảm xuống dưới các mức cần quan tâm.\nTạo thêm Vertical annotation với label là Job start Điều chỉnh thời gian cho vertical annotation\nDi chuột vào phần đầu của đường chỉ trên biểu đồ Quan sát thấy công việc bắt đầu vào khoảng 02:40 Sửa thông tin giờ của Date của Job start thành 02:40 Chọn Apply để áp dụng thay đổi Đường Job start đã được di chuyển đến vị trí chính xác.\n🔒 Security Note: Việc theo dõi chính xác thời điểm bắt đầu và kết thúc của các công việc không chỉ giúp tối ưu hiệu suất mà còn hỗ trợ phát hiện các hoạt động bất thường, góp phần nâng cao bảo mật cho hệ thống của bạn.\n💡 Pro Tip: Bạn có thể xóa các đánh dấu này trước khi chuyển sang phần tiếp theo, nơi chúng ta sẽ tập trung vào việc làm việc với các biểu thức phức tạp hơn trong CloudWatch.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparatory-steps/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: Trong phần này, chúng ta sẽ thiết lập môi trường lab bằng cách triển khai một AWS CloudFormation Stack. Stack này sẽ tự động cung cấp tất cả tài nguyên AWS cần thiết để thực hành với Amazon CloudWatch.\nTriển khai CloudFormation Stack Truy cập vào AWS Management Console\nTìm kiếm dịch vụ CloudFormation trong thanh tìm kiếm Chọn CloudFormation từ kết quả tìm kiếm Trong giao diện CloudFormation\nChọn Create stack Chọn With new resources (standard) Trong giao diện Create stack\n💡 Pro Tip: Tải file template về máy trước khi tiếp tục để quá trình triển khai diễn ra suôn sẻ.\nTải file cấu hình template về máy Trong phần Prerequisite - Prepare template, chọn Choose an existing template Tiếp theo chọn Upload a template file Ấn Choose file để tải lên file template đã tải về Ấn Next Cấu hình thông tin Stack\nStack name: Nhập FCJ-CloudWatch-Workshop (hoặc một tên dễ nhớ khác) RegionId: Chọn đúng Region ID nơi bạn đang thực hiện workshop (ví dụ: us-east-1 cho N. Virginia) Giữ nguyên các tham số còn lại với giá trị mặc định Ấn Next Cấu hình tùy chọn Stack\n⚠️ Warning: Đảm bảo bạn đã tích vào ô xác nhận IAM resources để CloudFormation có thể tạo các tài nguyên IAM cần thiết.\nKhông cần thay đổi cấu hình mặc định trên trang này Cuộn xuống dưới cùng Tích chọn I acknowledge that AWS CloudFormation might create IAM resources with custom names Ấn Next Xem lại và tạo Stack\nKiểm tra lại tất cả thông tin cấu hình Cuộn xuống dưới cùng và ấn Submit để bắt đầu tạo Stack Theo dõi quá trình triển khai\nℹ️ Information: Quá trình triển khai Stack có thể mất khoảng 5 phút để hoàn tất. Trong thời gian này, CloudFormation sẽ tự động tạo tất cả tài nguyên cần thiết cho workshop.\nXác nhận triển khai thành công 🔒 Security Note: Sau khi triển khai thành công, hãy kiểm tra tab Outputs của Stack để lấy thông tin về các tài nguyên đã được tạo, bao gồm các URL và thông tin truy cập cần thiết cho các bước tiếp theo.\n💡 Pro Tip: Khi Stack hiển thị trạng thái CREATE_COMPLETE với màu xanh lá, điều này xác nhận rằng tất cả tài nguyên đã được triển khai thành công và bạn đã sẵn sàng để tiếp tục với các bài thực hành Amazon CloudWatch.\n"
},
{
	"uri": "//localhost:1313/vi/4-cloud-watch-logs/4.2-logs-insights/",
	"title": "CloudWatch Logs Insights",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs Insights Trong phần này thì chúng ta sẽ thực hiện tạo logs từ một ứng dụng, sau đó là sẽ query những logs này ở trong CloudWatch Logs Insights. Mình sẽ chọn một instance nào đó để làm mẫu.\nTrên thanh tìm kiếm dịch vụ.\nNhập EC2. Chọn EC2. Vào trong trang Instances của EC2 Console\nChọn một Instance bất kì, ở đây mình chọn Instance-A. Ấn chọn Connect. Trong trang Connect to instance.\nChọn tab Session Manager. Ấn Connect. Chờ một ít phút thì một Terminal hiện lên.\nĐầu tiên là vào trong tmp. Sau đó là tải file py script về. cd /tmp sudo aws s3 cp s3://workshop-template-bucket/logger.py . Cấp quyền thực thi và thực thi file script này. sudo chmod +x logger.py python3 logger.py \u0026amp; Kiểm tra các logger đang chạy dưới dạng process ps -aux | grep logger Có thể thấy thì hiện tại có 2 processes đang chạy, nó sẽ chạy cho tới cuối bài.\nDùng lệnh để in ra các dòng log từ file /var/log/messages, nó sẽ in cho tới khi nào mình huỷ. sudo tail -f /var/log/messages Trở lại CloudWatch Console, vào trong Logs Insights ở thanh menu bên trái. Chúng ta sẽ thực hiện query logs ở trong này. Trong Selection criteria, tìm /ec2 và chọn /ec2/linux/var/log/messages. Nhập vào dòng query như bên dưới và ấn Run query. fields @timestamp, @message\r| sort @timestamp desc\r| limit 20 Và được kết quả.\nĐây chính là log mà chúng ta mới tạo ra ở bước trên.\nGiờ thì thử query là các ERROR Logs. fields @timestamp, @message\r| filter @message like /ERROR/\r| sort @timestamp desc\r| limit 20 Cũng là những log lỗi mà hồi nãy chúng ta đã tạo ra.\nTiếp theo là các WARN Logs. fields @timestamp, @message\r| filter @message like /WARN/\r| sort @timestamp desc\r| limit 20 Đây là các logs mới được tạo ra.\nGiờ thử query lại log, lỗi, chúng ta cũng sẽ thấy được các log mới được tạo ra. Ngoài ra thì chúng ta còn có thể thực hiện được việc query theo từ khoá khác. Như câu query ở bên dưới. fields @timestamp, @message\r| filter @message like /eth0/\r| sort @timestamp desc\r| stats count (*) by bin() Trực quan hoá query log Ngoài ra thì chúng ta còn có thể xem được biểu đồ của các query này nữa. Chuyển sang tab Visualization.\nLưu lệnh truy vấn Về sau thì có thể chúng ta sẽ có nhiều câu truy vấn cần sử dụng lại hoặc là có những câu truy vấn phức tạp hơn mà chúng ta cần phải lưu lại. Thì Logs Insights có hỗ trợ cho chúng ta lưu lại các câu truy vấn này.\nVí dụ mình sẽ lưu lại câu truy vấn lỗi.\nTrở lại màn hình chính của Logs Insights. Dán lại lệnh query tìm Error logs. Ấn chọn Save. Trong trang Save a new query, điền các thông tin như\nQuery name: Erors. Folder: cloudwatch-workshop, và tích chọn Create new. Kiểm tra lại thông tin trong phần Query definition details. Ấn Save. Lịch sử truy vấn Logs Insights còn cho phép chúng ta có thể xem lại được lịch sử đã truy vấn. Trên giao diện, ấn chọn History (dưới Query editor).\nTrong phần tiếp theo, chúng ta sẽ tiếp tục dùng hành vi này của các logger để tạo ra một Metrics Filter, để chuyển các Log thành Metrics. Sau đó sẽ thao tác nó với Alarm.\n"
},
{
	"uri": "//localhost:1313/vi/3-cloud-watch-metric/3.2-search-expression/",
	"title": "Thực hiện các phép tìm kiếm",
	"tags": [],
	"description": "",
	"content": "Biểu thức tìm kiếm Ở phần trước thì chúng ta thực hiện xem metric theo cách thủ công, tuy nhiên nó vẫn còn nhiều hạn chế cũng như là phải thao tác nhiều lần với nhiều metrics khác nhau. Trong phần này chúng ta có thể thực hiện việc này nhanh hơn với Search Expression.\nXoá hết các thông tin trong biểu đồ cũ đi, ấn X hoặc ấn Clear graph. Trở lại tab Browse\nXoá bộ lọc EBSWriteBytes đi. Thêm lại CPUUtilization. Ấn Graph search. Quay trở lại tab Graphed metrics, chúng ta có thể thấy cột Details có một biểu thức tìm kiếm vừa mới hiện lên ở đây. Nhập một biểu thức mới với nội dung như bên dưới. Biểu thức này chúng ta đang thực hiện tìm kiếm ở một Namespace khác ngoài EC2. Sau đó là ấn Apply để áp dụng.\nỞ góc bên trên bên phải cùng\nXổ ô Line. Chọn Stacked area. Và biểu đồ của chúng ta đã dễ nhìn hơn.\nTìm lượng bộ nhớ trung bình sử dụng theo phần trăm (Disk Used Percent) SEARCH(\u0026#34;disk_used_percent\u0026#34;, \u0026#39;Average\u0026#39;, 300) Tìm theo từ khoá \u0026ldquo;used\u0026rdquo; SEARCH(\u0026#34;used\u0026#34;, \u0026#39;Average\u0026#39;, 300) Có thể thấy là kết quả ít nhiều đã khác đi.\nOk vậy thì chúng ta vừa mới thực hiện xong cơ bản các phép tìm kiểu ở trong CloudWatch Console. Sang phần tiếp theo thì chúng ta sẽ thực hiện các phép toán đơn giản.\n"
},
{
	"uri": "//localhost:1313/vi/3-cloud-watch-metric/",
	"title": "CloudWatch Metric",
	"tags": [],
	"description": "",
	"content": "CloudWatch Metric ℹ️ Information: Khi làm việc với Amazon CloudWatch, chúng ta chủ yếu tập trung vào việc \u0026ldquo;quan sát\u0026rdquo;. CloudWatch cung cấp các biểu đồ trực quan và bảng dữ liệu chi tiết để theo dõi các Metric. Việc này đóng vai trò quan trọng trong việc đánh giá tình trạng của ứng dụng và hệ thống, từ đó giúp đưa ra quyết định chính xác về việc tối ưu hóa và nâng cấp.\n💡 Pro Tip: Metrics trong CloudWatch là nền tảng cho việc xây dựng hệ thống giám sát toàn diện, giúp bạn phát hiện sớm các vấn đề tiềm ẩn trước khi chúng ảnh hưởng đến người dùng cuối.\nTrong phần này, chúng ta sẽ thực hành các kỹ thuật sau:\nLựa chọn và hiển thị các Metrics từ các ứng dụng đã triển khai ở phần trước Sử dụng các biểu thức tìm kiếm nâng cao (Search Expressions) để lọc và hiển thị Metrics trên biểu đồ Áp dụng các phép tính toán Metric nâng cao (Math Expressions) để trích xuất thông tin giá trị như tổng, trung bình, xếp hạng của các Metrics Tạo và tùy chỉnh Dynamic Labels để nâng cao tính trực quan cho các chú thích biểu đồ 🔒 Security Note: Việc theo dõi Metrics một cách hiệu quả không chỉ giúp tối ưu hiệu suất mà còn là một phần quan trọng trong chiến lược bảo mật, giúp phát hiện các hoạt động bất thường trong hệ thống.\nNội dung của phần này bao gồm:\nXem các Metrics Thực hiện các phép tìm kiếm Thực hiện các phép toán học Tạo Dynamic Labels "
},
{
	"uri": "//localhost:1313/vi/4-cloud-watch-logs/4.3-metric-filter/",
	"title": "CloudWatch Metric Filter",
	"tags": [],
	"description": "",
	"content": "CloudWatch Metric Filter ℹ️ Information: CloudWatch Metric Filters cho phép bạn trích xuất dữ liệu có giá trị từ logs và chuyển đổi chúng thành các metrics có thể đo lường được, giúp bạn theo dõi và cảnh báo về các sự kiện quan trọng trong hệ thống.\nQuay lại màn hình chính của CloudWatch\nChọn Log groups từ menu bên trái Tìm kiếm /ec2 trong thanh tìm kiếm Chọn /ec2/linux/var/log/messages Trong giao diện của /ec2/linux/var/log/messages\nMở rộng menu Actions Chọn Create metric filter Trong phần Define Pattern, cấu hình các thông tin sau:\nFilter pattern: mở rộng dropdown và chọn ERROR Test pattern: mở rộng và chọn một instance (nên chọn instance mà chúng ta đã tạo processes ở các bước trước) 💡 Pro Tip: Việc kiểm thử pattern trước khi tạo metric filter giúp bạn xác nhận rằng filter sẽ bắt đúng các sự kiện mong muốn, tránh tình trạng thiếu dữ liệu hoặc dữ liệu không chính xác.\nNhấn Test pattern để kiểm tra xem filter hoạt động chính xác không Trong phần Create filter name của Assign metric, nhập PythonAppErrors Trong phần Metric details, cấu hình các thông tin sau:\nMetric namespace: ec2-logs Metric name: /var/log/messages - ERROR Metric value: 1 Default value: 0 Unit: mở rộng dropdown và chọn Count Nhấn Next ⚠️ Warning: Việc đặt namespace và tên metric phù hợp rất quan trọng để dễ dàng tìm kiếm và phân loại metrics trong môi trường có nhiều ứng dụng. Hãy sử dụng quy ước đặt tên nhất quán trong toàn bộ hệ thống của bạn.\nXem lại cấu hình và nhấn Create metric filter Trở lại Metrics \u0026gt; All metrics\nTìm kiếm với từ khóa /var/log/messages và ERROR Chọn ec2-logs \u0026gt; Metrics with no dimensions ℹ️ Information: Bây giờ chúng ta đã có một metric được tạo từ các log ERROR trong ứng dụng Python. Metric này có thể được sử dụng để tạo biểu đồ, dashboards, và cảnh báo khi số lượng lỗi vượt quá ngưỡng cho phép.\n💡 Pro Tip: Bạn có thể tạo nhiều metric filters khác nhau cho cùng một log group để theo dõi các loại sự kiện khác nhau, như WARNING, INFO, hoặc các mẫu tùy chỉnh phù hợp với ứng dụng của bạn.\n🔒 Security Note: Metric filters là công cụ quan trọng để phát hiện các vấn đề bảo mật tiềm ẩn trong hệ thống của bạn. Hãy cân nhắc tạo các filters đặc biệt cho các sự kiện liên quan đến bảo mật như đăng nhập thất bại, thay đổi quyền, hoặc truy cập trái phép.\nTrong bước tiếp theo, chúng ta sẽ thiết lập CloudWatch Alarm cho metric này để nhận thông báo khi có quá nhiều lỗi xảy ra trong ứng dụng.\n"
},
{
	"uri": "//localhost:1313/vi/3-cloud-watch-metric/3.3-math-expression/",
	"title": "Thực hiện các phép toán học",
	"tags": [],
	"description": "",
	"content": "Biểu thức toán học Tiếp tục, trong phần này chúng ta sẽ thực hiện các thao tác biểu thức toán cơ bản.\nĐầu tiên là dọn dẹp biểu thức tìm kiếm trước đó. Về lại tab Browse.\nẤn Graph search để lấy lại biểu đồ như ban đầu ở bước trước. Sau đó xổ phần Add math ở bên góc trên bên phải, dưới biểu đồ.\nXổ tiếp Filter. Chọn Top 10 by sum. Giờ thì chúng ta sẽ tiến hành sắp xếp lại biểu đồ dựa trên biểu thức tìm kiếm đầu tiên, với biểu thức như bên dưới. SORT(e1, SUM, DEC, 3) OK xong, trong phần này thì chúng ta thực hiện đơn giản như vậy thôi, tiếp tục thực hành ở phần sau.\n"
},
{
	"uri": "//localhost:1313/vi/4-cloud-watch-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs ℹ️ Information: Amazon CloudWatch Logs là dịch vụ giám sát và lưu trữ logs tập trung, cho phép bạn thu thập, phân tích và lưu trữ logs từ các ứng dụng, hệ thống và dịch vụ AWS. Logs là thành phần không thể thiếu trong mỗi hệ thống, cung cấp nhiều thông tin quan trọng như:\nCác hoạt động và sự kiện trong ứng dụng Hành động của người dùng và thông tin xác thực Lỗi hệ thống và ngoại lệ ứng dụng Cảnh báo và thông báo hệ thống 💡 Pro Tip: Việc phân tích logs hiệu quả không chỉ giúp khắc phục sự cố nhanh chóng mà còn hỗ trợ tối ưu hóa hiệu suất và phát hiện các mẫu hành vi bất thường trong hệ thống của bạn.\n🔒 Security Note: CloudWatch Logs cũng đóng vai trò quan trọng trong việc tuân thủ các yêu cầu về bảo mật và kiểm toán, cho phép bạn lưu trữ logs an toàn và truy xuất chúng khi cần thiết.\nTrong phần này, chúng ta sẽ thực hành các kỹ thuật cơ bản sau:\nXem và phân tích logs trong CloudWatch Tạo logs mới và thực hiện các truy vấn nâng cao Thiết lập Metric Filters để trích xuất dữ liệu có giá trị từ logs ⚠️ Warning: Các kỹ năng được giới thiệu trong phần này sẽ được áp dụng và mở rộng trong các bài học tiếp theo, vì vậy hãy đảm bảo bạn nắm vững các khái niệm cơ bản trước khi tiếp tục.\nNội dung của phần này bao gồm:\nCloudWatch Logs CloudWatch Logs Insights CloudWatch Metric Filter "
},
{
	"uri": "//localhost:1313/vi/3-cloud-watch-metric/3.4-dynamic-label/",
	"title": "Tạo dynamic labels",
	"tags": [],
	"description": "",
	"content": "Dynamic Labels Từ đầu tới giờ thì các bạn có thể thấy là nhãn trong phần chú thích của biểu đồ (Legend) chưa lần nào được cập nhật. Chúng ta có thể chỉnh sửa nó thủ công, tuy nhiên việc chỉnh sửa trên nhiều Metrics không phải là một ý hay. Nên trong phần này, chúng ta sẽ thao tác cơ bản cách đổi nhãn tự động mà không cần phải tự tay thay đổi.\nXoá các biểu thức cũ trong phần trước. Xoá hết các Filers và ấn vào All để trở phần phần namespaces. Sau đó là vào trong namespace CWAgent. Chọn tiếp Dimension là ImageId, InstanceId, InstanceType, exe, process_name. Trên thanh tìm kiếm, chúng ta nhập 2 thông tin sau.\nexe=cloudwatch MetricName=procstat_memory_rss (trong phần này thì chúng ta chỉ rõ là cần Metric name). Tiếp tục ấn vào Graph search để hiển thị biểu đồ. Sang tab Graphed metrics.\nXổ Add dynamic label. Xổ All labels. Chọn PROP(\u0026lsquo;Dim.DimName\u0026rsquo;). Chúng ta có thể thấy là Label trên biểu đồ đã thay đổi.\nSửa lại biểu thức của label theo dạng. ${PROP(\u0026#39;Dim.exe\u0026#39;)} - ${PROP(\u0026#39;Dim.InstanceId\u0026#39;)} - ${PROP(\u0026#39;MetricName\u0026#39;)} Label đã chuyển về thành các phần như sau.\n"
},
{
	"uri": "//localhost:1313/vi/5-cloud-watch-alarm/",
	"title": "CloudWatch Alarms",
	"tags": [],
	"description": "",
	"content": "CloudWatch Alarms ℹ️ Information: Amazon CloudWatch Alarms giúp bạn tự động giám sát các metrics và logs, kích hoạt hành động khi các ngưỡng được vượt qua. Trong phần này, chúng ta sẽ thiết lập Alarm cho Error Log Metric đã tạo từ phần trước.\nTrở lại màn hình chính của CloudWatch.\nChọn Alarms ở menu bên trái. Chọn All alarms. Ấn chọn Create alarm. Chọn Select metric. Cửa sổ metrics hiện lên, trong Custom namespaces, chọn ec2-logs.\nChọn tiếp Metrics with no dimensions, chọn /var/log/messages và ấn chọn Select metric.\nTrong phần Specify metric and conditions, chọn Period là 1 minutes. Trong phần Conditions\nThreshold type: Static. Điều kiện: Greater than 10. 💡 Pro Tip: Đường nét đứt ngang trên biểu đồ chỉ ra ngưỡng mà Alarm sẽ được kích hoạt. Khi số lượng lỗi vượt quá ngưỡng này, đó là dấu hiệu của sự cố tiềm ẩn trong ứng dụng cần được kiểm tra ngay lập tức.\nSau đó ấn Next để tiếp tục.\nGiờ thì chúng ta cấu hình thông báo như sau\nAlarm state trigger: In alarm. Chọn Create new topic. Tên topic là: Error_logs_reach_10. Email thông báo tới: bạn sẽ nhập email của bạn vào, ở đây mình sẽ nhập của mình. Ấn Create topic. Ấn chọn Next.\n⚠️ Warning: Đảm bảo rằng địa chỉ email bạn cung cấp là chính xác và được kiểm tra thường xuyên. Nếu không xác nhận đăng ký SNS, bạn sẽ không nhận được thông báo khi alarm kích hoạt.\nỞ bước cuối, nhập tên alarm là PythonApplicationErrorAlarm và ấn chọn Next. 💡 Pro Tip: Đặt tên alarm có ý nghĩa và mô tả rõ mục đích giúp dễ dàng quản lý khi số lượng alarm tăng lên trong môi trường sản xuất thực tế.\nXem lại kết quả và ấn chọn Create alarm. Kết quả\nĐăng nhập vào Gmail hoặc bất kì trang email nào mà bạn dùng. Bạn sẽ thấy một email được gửi tới từ AWS Notification. Ấn chọn Confirm subscription.\n🔒 Security Note: Việc xác nhận đăng ký SNS không chỉ kích hoạt thông báo mà còn là một biện pháp bảo mật, đảm bảo rằng chỉ những người dùng được ủy quyền mới nhận được thông báo về trạng thái hệ thống.\nℹ️ Information: Với CloudWatch Alarms đã thiết lập, bạn có thể mở rộng hệ thống giám sát bằng cách tích hợp với các dịch vụ khác như AWS Lambda để tự động khắc phục sự cố, hoặc AWS Systems Manager để thực hiện các hành động tự động trên tài nguyên bị ảnh hưởng.\n"
},
{
	"uri": "//localhost:1313/vi/6-cloud-watch-dashboard/",
	"title": "CloudWatch Dashboards",
	"tags": [],
	"description": "",
	"content": "CloudWatch Dashboards ℹ️ Information: Amazon CloudWatch Dashboards là công cụ trực quan hóa mạnh mẽ cho phép bạn tạo các bảng điều khiển tùy chỉnh để giám sát tài nguyên AWS trong thời gian thực. Dashboards giúp tập hợp các metrics, logs và alarms quan trọng vào một nơi duy nhất, tạo điều kiện thuận lợi cho việc giám sát và phân tích hệ thống.\nTrong phần cuối của workshop này, chúng ta sẽ tạo một Dashboard đơn giản để tập trung quản lý các Metrics và Alarms đã thiết lập trước đó, đặc biệt là Error Logs đã cấu hình trong phần trước.\nThêm alarm đã tạo vào Dashboard:\nChọn PythonApplicationErrorAlarm Mở rộng menu Actions Chọn Add to dashboard Trong hộp thoại Add to dashboard, chọn Create new Cấu hình Dashboard mới:\nNhập tên dashboard: CloudWatch-Workshop Nhấn Create Nhấn Add to dashboard 💡 Pro Tip: Đặt tên dashboard có ý nghĩa và phân loại rõ ràng sẽ giúp bạn dễ dàng quản lý khi số lượng dashboards tăng lên trong môi trường thực tế. Cân nhắc sử dụng các tiền tố như \u0026ldquo;Prod-\u0026rdquo;, \u0026ldquo;Dev-\u0026rdquo;, hoặc tên ứng dụng để phân loại.\nDưới đây là dashboard vừa được tạo:\nℹ️ Information: CloudWatch Dashboards hỗ trợ nhiều loại widget khác nhau như biểu đồ, số liệu đơn, bảng, văn bản và nhiều hơn nữa. Mỗi widget có thể được tùy chỉnh về kích thước, vị trí và hiển thị dữ liệu.\nBạn có thể thực hiện nhiều thao tác tùy chỉnh trên widget này:\n🔒 Security Note: Dashboards có thể được chia sẻ với người dùng khác trong tổ chức của bạn hoặc thậm chí công khai (không yêu cầu đăng nhập AWS). Hãy cẩn thận khi chia sẻ dashboards có chứa thông tin nhạy cảm về cơ sở hạ tầng của bạn.\n⚠️ Warning: CloudWatch Dashboards có giới hạn 500 widgets trên mỗi dashboard và 20.000 metrics trên tất cả các dashboards. Trong môi trường sản xuất lớn, hãy cân nhắc tạo nhiều dashboards chuyên biệt thay vì một dashboard quá lớn và phức tạp.\nChúc mừng! Bạn đã hoàn thành bài workshop về Amazon CloudWatch. Giờ đây bạn đã nắm vững các kỹ năng cơ bản để giám sát, phân tích và cảnh báo trong môi trường AWS của mình.\n"
},
{
	"uri": "//localhost:1313/vi/7-clean-up-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên ℹ️ Information: Sau khi hoàn thành workshop, việc dọn dẹp tài nguyên là bước quan trọng để tránh phát sinh chi phí không cần thiết. Trong phần này, chúng ta sẽ xóa CloudFormation stack đã tạo ở đầu bài.\n⚠️ Warning: Mặc dù các tài nguyên EC2 và các dịch vụ liên quan sẽ bị xóa ngay lập tức, CloudWatch Metrics và Logs sẽ vẫn tồn tại trong hệ thống AWS của bạn tối đa 15 tháng theo chính sách lưu trữ mặc định.\nTrên thanh tìm kiếm dịch vụ AWS:\nNhập CloudFormation. Chọn CloudFormation. Trong CloudFormation Console:\nChọn stack đã tạo trong workshop này. Ấn chọn Delete. Trong hộp thoại xác nhận:\nẤn chọn Delete để xác nhận việc xóa stack. 💡 Pro Tip: Quá trình xóa stack có thể mất vài phút tùy thuộc vào số lượng và độ phức tạp của tài nguyên. Bạn có thể theo dõi tiến trình trong tab \u0026ldquo;Events\u0026rdquo; của stack.\nChờ đợi quá trình xóa hoàn tất:\nStack sẽ hiển thị trạng thái \u0026ldquo;DELETE_IN_PROGRESS\u0026rdquo; trong quá trình xóa. Sau khi hoàn tất, stack sẽ biến mất khỏi danh sách. 🔒 Security Note: Việc dọn dẹp tài nguyên không chỉ giúp tiết kiệm chi phí mà còn là biện pháp bảo mật tốt, giảm thiểu bề mặt tấn công tiềm ẩn trong môi trường AWS của bạn.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
[
{
	"uri": "/",
	"title": "AWS CloudWatch Workshop",
	"tags": [],
	"description": "",
	"content": "AWS CloudWatch Workshop Overview ‚ÑπÔ∏è Information: Amazon CloudWatch is a comprehensive monitoring and management service that provides data-driven insights for AWS resources, hybrid, and on-premises applications. It enables you to collect and analyze performance and operational data through unified logs and metrics, eliminating siloed monitoring approaches across servers, networks, and databases. CloudWatch facilitates end-to-end observability across your applications, infrastructure, and services while enabling automated actions based on alerts, logs, and events to reduce mean time to resolution (MTTR). This powerful service allows you to redirect valuable resources toward application development and business innovation.\nCloudWatch delivers actionable insights that help optimize application performance, efficiently manage resources, and maintain visibility into system health. The service provides high-resolution metric and log data with one-second granularity, retains metric data for 15 months, and supports advanced metric calculations. CloudWatch enables cost optimization through historical data analysis while providing real-time information to fine-tune application and infrastructure resources.\nüí° Pro Tip: CloudWatch Container Insights offers specialized monitoring capabilities for containerized applications and microservices. It automatically collects, aggregates, and summarizes key compute metrics (CPU, memory, disk, network) and diagnostic information (such as container restart failures), enabling DevOps teams to quickly identify and resolve issues. Container Insights provides visibility into various container orchestration platforms including Amazon EKS (Elastic Kubernetes Service), Amazon ECS (Elastic Container Service), AWS Fargate, and self-managed Kubernetes clusters.\nContent Introduction Preparation steps CloudWatch Metric CloudWatch Logs CloudWatch Alarm CloudWatch Dashboard Cleanup resources "
},
{
	"uri": "/4-cloud-watch-logs/4.1-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "Amazon CloudWatch Logs Basics ‚ÑπÔ∏è Information: CloudWatch Logs is a centralized service that enables you to monitor, store, and access log files from various AWS resources and applications. It provides a unified view of your system\u0026rsquo;s operational health through log data.\nFollow these steps to explore CloudWatch Logs functionality:\nOn the main CloudWatch console:\nExpand the Logs menu on the left navigation pane. Select Log groups. In the search field, enter /ec2 and select the /ec2/linux/var/log/messages log group. Select any EC2 instance from the list to view its specific logs. Examine the log entries generated by various system components such as dhclient, NET, ec2net, systemd, and other services. üí° Pro Tip: When troubleshooting EC2 instances, these system logs often contain valuable information about service failures, network configuration issues, and system resource constraints.\nReturn to the /ec2/linux/var/log/messages log group details page to configure log retention settings:\nClick Actions in the upper right. Select Edit retention setting. In the Retention setting dialog: Set Expire events after to 1 week (7 days). Click Save. üîí Security Note: Setting appropriate log retention periods helps balance operational visibility with cost optimization. For compliance-sensitive workloads, consider longer retention periods and exporting logs to Amazon S3 for long-term archival.\nThese fundamental operations provide insight into how CloudWatch Logs captures and organizes log data from your EC2 instances, helping you understand the operational patterns and troubleshoot issues across your AWS environment.\n"
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview ‚ÑπÔ∏è Information: In this lab, you will gain hands-on experience with Amazon CloudWatch, AWS\u0026rsquo;s comprehensive monitoring and observability service, through the following tasks:\nWorking with Metrics sent from sample applications running on pre-configured Amazon EC2 instances Viewing Logs from these applications on EC2 instances, then creating Metrics from Logs Creating Alarms based on Metrics to receive notifications about system changes Building a custom CloudWatch Dashboard with Custom Metrics and Alarms for enhanced system visibility üí° Pro Tip: This workshop is ideal for IT professionals interested in cloud operations who want to leverage CloudWatch for comprehensive system monitoring. You\u0026rsquo;ll learn practical skills that provide an intuitive approach to system observability in AWS environments.\n"
},
{
	"uri": "/3-cloud-watch-metric/3.1-view-metrics/",
	"title": "Viewing Metrics",
	"tags": [],
	"description": "",
	"content": "Viewing CloudWatch Metrics ‚ÑπÔ∏è Information: In this section, you\u0026rsquo;ll learn how to navigate and visualize Amazon CloudWatch metrics to gain insights into your AWS resources\u0026rsquo; performance and health.\nAccessing CloudWatch Metrics Access the AWS Management Console: In the search bar, type CloudWatch. Select CloudWatch from the services list. In the CloudWatch console: Expand the Metrics section in the left navigation pane. Select All metrics. Finding EC2 Instance Metrics In the metrics dashboard: Enter EC2 in the search bar to filter metrics by service. From the search results: Select EC2 \u0026gt; Per-Instance Metrics to view metrics for individual EC2 instances. Analyzing CPU Utilization Filter for specific metrics: In the search bar, type CPUUtilization and press Enter. By default, CloudWatch searches by Metric name. Compare instance performance: Select two of the five instances created by the CloudFormation stack. Scroll down to view the graphed data. üí° Pro Tip: When comparing multiple instances, look for patterns that might indicate system-wide events versus instance-specific issues.\nAnalyze the graph data: Both instances initiated operations around 2:40 AM, showing peak activity at this time. By 3:30 AM, both instances appear to have completed their workloads. Examining Multiple Metrics Focus on a single instance: Deselect the line for Instance B. Clear the CPUUtilization filter. Search for EBSWriteBytes to examine storage I/O. Select Instance A and analyze the correlation: Initially, high volume of EBS read/write operations indicates data processing. CPUUtilization and EBSWriteBytes follow similar patterns with some divergence. This suggests the application primarily interacts with EBS during startup before transitioning to other operations. For clearer analysis: You can hide individual metrics by toggling their visibility. ‚ÑπÔ∏è Information: In the next section, we\u0026rsquo;ll explore more advanced visualization techniques for better metric analysis.\nEnhancing Chart Visualization When multiple metrics with different units are displayed on the same chart, interpretation can be challenging. Let\u0026rsquo;s improve visualization with CloudWatch\u0026rsquo;s advanced charting features.\nSeparate Y-axis for different metrics: Navigate to the Graphed metrics tab. For EBSWriteBytes, click the Y-axis column dropdown and select Right Y-axis. The chart now displays each metric on its appropriate scale. Add a horizontal threshold annotation: Go to the Options tab. Click Add horizontal annotation. Configure the threshold: Label: 5% Mark Value: 5 This adds a dashed horizontal line at the 5% CPU utilization level. üí° Pro Tip: Horizontal annotations are excellent for visualizing thresholds that might trigger alarms or indicate performance boundaries.\nAdd a vertical event marker: Create a Vertical annotation labeled Job start. This adds a dashed vertical line to mark a specific point in time. Adjust the vertical annotation time: Hover over the Job start marker. Note that the job actually started around 2:40 AM. Update the annotation: Change the Date/Time for Job start to 2:40 AM. Click Apply to save your changes. Verify the repositioned marker: The Job start marker now aligns with the beginning of instance activity. üîí Security Note: When analyzing metrics for production workloads, pay special attention to unexpected spikes or patterns that might indicate security events or unauthorized access.\nNext Steps This concludes our exploration of basic CloudWatch metric visualization. In the next section, we\u0026rsquo;ll dive into working with metric expressions for more advanced analysis capabilities.\n‚ö†Ô∏è Warning: Before proceeding to the next section, you may want to remove the annotations to start with a clean workspace.\n"
},
{
	"uri": "/4-cloud-watch-logs/4.2-logs-insights/",
	"title": "CloudWatch Logs Insights",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs Insights Trong ph·∫ßn n√†y, ch√∫ng ta s·∫Ω t·∫°o log t·ª´ m·ªôt ·ª©ng d·ª•ng v√† sau ƒë√≥ truy v·∫•n c√°c log n√†y trong CloudWatch Logs Insights. M√¨nh s·∫Ω ch·ªçn m·ªôt EC2 instance l√†m m·∫´u.\nTr√™n thanh t√¨m ki·∫øm d·ªãch v·ª•:\nNh·∫≠p EC2. Ch·ªçn EC2. Trong EC2 Console, truy c·∫≠p v√†o trang Instances:\nCh·ªçn m·ªôt instance b·∫•t k·ª≥ (·ªü ƒë√¢y m√¨nh ch·ªçn Instance-A). ·∫§n ch·ªçn Connect. Trong trang Connect to instance:\nChuy·ªÉn sang tab Session Manager. Nh·∫•n Connect. ƒê·ª£i m·ªôt l√∫c, m·ªôt Terminal s·∫Ω hi·ªán l√™n:\nDi chuy·ªÉn v√†o th∆∞ m·ª•c /tmp. T·∫£i xu·ªëng script Python t·ª´ S3 bucket. cd /tmp sudo aws s3 cp s3://workshop-template-bucket/logger.py . C·∫•p quy·ªÅn th·ª±c thi v√† ch·∫°y script: sudo chmod +x logger.py python3 logger.py \u0026amp; Ki·ªÉm tra c√°c logger ƒëang ch·∫°y d∆∞·ªõi d·∫°ng process: ps -aux | grep logger Hi·ªán t·∫°i c√≥ 2 process ƒëang ch·∫°y, ch√∫ng s·∫Ω ch·∫°y cho ƒë·∫øn khi k·∫øt th√∫c b√†i th·ª±c h√†nh.\nIn ra c√°c d√≤ng log t·ª´ file /var/log/messages, n√≥ s·∫Ω ch·∫°y li√™n t·ª•c cho ƒë·∫øn khi b·ªã h·ªßy: sudo tail -f /var/log/messages Tr·ªü l·∫°i CloudWatch Console, v√†o Logs Insights t·ª´ menu b√™n tr√°i ƒë·ªÉ truy v·∫•n log. Trong Selection criteria, t√¨m /ec2 v√† ch·ªçn /ec2/linux/var/log/messages. Nh·∫≠p c√¢u truy v·∫•n sau v√† nh·∫•n Run query: fields @timestamp, @message\r| sort @timestamp desc\r| limit 20 K·∫øt qu·∫£ hi·ªÉn th·ªã nh∆∞ sau:\nƒê√¢y ch√≠nh l√† c√°c log ch√∫ng ta v·ª´a t·∫°o.\nTruy v·∫•n log c√≥ ch·ª©a ERROR: fields @timestamp, @message\r| filter @message like /ERROR/\r| sort @timestamp desc\r| limit 20 ƒê√¢y l√† c√°c log l·ªói m√† ch√∫ng ta ƒë√£ t·∫°o.\nTruy v·∫•n log c√≥ ch·ª©a WARN: fields @timestamp, @message\r| filter @message like /WARN/\r| sort @timestamp desc\r| limit 20 Truy v·∫•n l·∫°i log l·ªói ƒë·ªÉ xem log m·ªõi t·∫°o: Truy v·∫•n theo t·ª´ kh√≥a kh√°c (eth0): fields @timestamp, @message\r| filter @message like /eth0/\r| sort @timestamp desc\r| stats count (*) by bin() Tr·ª±c quan h√≥a truy v·∫•n log Ch√∫ng ta c√≥ th·ªÉ xem bi·ªÉu ƒë·ªì c·ªßa c√°c truy v·∫•n b·∫±ng c√°ch chuy·ªÉn sang tab Visualization.\nL∆∞u l·ªánh truy v·∫•n Logs Insights h·ªó tr·ª£ l∆∞u truy v·∫•n ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i sau n√†y.\nV√≠ d·ª•, l∆∞u truy v·∫•n ERROR logs:\nQuay l·∫°i Logs Insights. Nh·∫≠p l·∫°i truy v·∫•n ERROR logs. Nh·∫•n Save. Trong Save a new query, ƒëi·ªÅn th√¥ng tin:\nQuery name: Errors Folder: cloudwatch-workshop (ch·ªçn Create new) Ki·ªÉm tra l·∫°i th√¥ng tin trong Query definition details. Nh·∫•n Save. L·ªãch s·ª≠ truy v·∫•n Logs Insights cho ph√©p xem l·∫°i l·ªãch s·ª≠ truy v·∫•n. Trong giao di·ªán, ch·ªçn History (d∆∞·ªõi Query editor).\nTrong ph·∫ßn ti·∫øp theo, ch√∫ng ta s·∫Ω t·∫°o Metrics Filter, chuy·ªÉn log th√†nh Metric, v√† thi·∫øt l·∫≠p Alarm.\n"
},
{
	"uri": "/2-preparatory-steps/",
	"title": "Preparatory steps",
	"tags": [],
	"description": "",
	"content": "Preparation Steps ‚ÑπÔ∏è Information: In this section, you\u0026rsquo;ll set up the necessary AWS resources for the CloudWatch workshop using AWS CloudFormation. This automated deployment will create EC2 instances with pre-configured applications that generate metrics and logs for our monitoring exercises.\nAccess the AWS Management Console:\nIn the search bar, type CloudFormation. Select CloudFormation from the services list. In the CloudFormation console:\nClick Create stack. Select With new resources (standard) from the dropdown. For the stack template:\nDownload the CloudFormation template. Under Prerequisite - Prepare template, select Choose an existing template. Choose Upload a template file. Click Choose file and select the template you just downloaded. Click Next to proceed. Configure stack details:\nStack name: Enter FCJ-CloudWatch-Workshop (or a preferred name that\u0026rsquo;s easily identifiable). RegionId: Select the AWS Region where you\u0026rsquo;re conducting this lab (for this example, we\u0026rsquo;re using us-east-1 - N. Virginia). Keep all other parameters at their default values. Click Next. üí° Pro Tip: Using a consistent naming convention for your CloudFormation stacks makes resource management easier, especially when working across multiple projects or environments.\nConfigure stack options:\nNo additional configuration is required on this page. Scroll to the bottom and check the acknowledgment box: I acknowledge that AWS CloudFormation might create IAM resources with custom names. Click Next. üîí Security Note: The CloudFormation template creates IAM roles with least-privilege permissions necessary for this workshop. In production environments, always review IAM permissions carefully to ensure they follow security best practices.\nReview and create:\nVerify all configuration details. Scroll to the bottom and click Submit to initiate stack creation. Monitor stack creation:\nThe stack creation process will begin immediately. Wait approximately 5 minutes for the deployment to complete. You can monitor the progress in the CloudFormation console. When the deployment completes successfully, you\u0026rsquo;ll see the stack status change to CREATE_COMPLETE:\n‚ÑπÔ∏è Information: The CloudFormation stack has deployed EC2 instances running sample applications that will generate metrics and logs for our CloudWatch exercises. These resources are pre-configured to demonstrate various CloudWatch capabilities throughout this workshop.\nThe preparation step is now complete. In the following sections, we\u0026rsquo;ll explore CloudWatch\u0026rsquo;s monitoring and observability features using the resources we\u0026rsquo;ve just deployed.\n"
},
{
	"uri": "/3-cloud-watch-metric/3.2-search-expression/",
	"title": "Search expressions",
	"tags": [],
	"description": "",
	"content": "Search Expressions In the previous section, we manually viewed metrics, but this method has limitations and requires multiple interactions with different metrics. In this section, we can perform this more efficiently using Search Expressions.\nRemove all information from the old graph by clicking X or Clear graph. Return to the Browse tab\nRemove the EBSWriteBytes filter. Add CPUUtilization. Click Graph search. Go back to the Graphed metrics tab, where a new search expression has appeared in the Details column. Enter a new expression as shown below. This expression searches in a different Namespace outside EC2. Then, click Apply to apply the changes.\nIn the upper-right corner\nOpen the Line dropdown. Select Stacked area. Now, the graph is easier to read.\nSearch for the average memory usage percentage (Disk Used Percent) SEARCH(\u0026#34;disk_used_percent\u0026#34;, \u0026#39;Average\u0026#39;, 300) Search using the keyword \u0026ldquo;used\u0026rdquo; SEARCH(\u0026#34;used\u0026#34;, \u0026#39;Average\u0026#39;, 300) The results have changed slightly.\nOkay, so we have completed the basic search operations in CloudWatch Console. In the next section, we will perform simple calculations.\n"
},
{
	"uri": "/4-cloud-watch-logs/4.3-metric-filter/",
	"title": "CloudWatch Metric Filter",
	"tags": [],
	"description": "",
	"content": "Creating a CloudWatch Metric Filter ‚ÑπÔ∏è Information: CloudWatch Metric Filters allow you to extract and transform log data into numerical CloudWatch metrics that you can graph or set alarms on.\nReturn to the main screen of Amazon CloudWatch\nSelect Log groups from the navigation pane Search for /ec2 in the filter box Select /ec2/linux/var/log/messages log group In the /ec2/linux/var/log/messages log group interface\nClick on Actions dropdown menu Select Create metric filter In the Define Pattern section, configure the following:\nFilter pattern: select ERROR from the dropdown menu Test pattern: select any log stream instance (preferably the instance where we created processes in the previous steps) Click Test pattern to validate the filter configuration In the Create filter name section of Assign metric, enter PythonAppErrors In the Metric details section, configure the following:\nMetric namespace: ec2-logs Metric name: /var/log/messages - ERROR Metric value: 1 Default value: 0 Unit: select Count from the dropdown menu Click Next Review your configuration and click Create metric filter Navigate to Metrics \u0026gt; All metrics in the CloudWatch console\nSearch for the keywords /var/log/messages and ERROR Select ec2-logs \u0026gt; Metrics with no dimensions üí° Pro Tip: You can create multiple metric filters for different error patterns or log events to gain comprehensive visibility into your application\u0026rsquo;s behavior.\nüîí Security Note: Ensure that your metric filters don\u0026rsquo;t extract sensitive information that might be present in your logs.\nNow we have a metric that captures ERROR logs from the application. In the next step, we will set up a CloudWatch Alarm for this metric to receive notifications when errors occur.\n"
},
{
	"uri": "/3-cloud-watch-metric/",
	"title": "CloudWatch Metrics",
	"tags": [],
	"description": "",
	"content": "CloudWatch Metrics ‚ÑπÔ∏è Information: Amazon CloudWatch Metrics are time-ordered data points that provide visibility into your AWS resources and applications. These metrics are the foundation of CloudWatch\u0026rsquo;s monitoring capabilities, enabling you to observe system performance, health, and operational status in real-time.\nCloudWatch provides intuitive visualization tools including customizable charts and data tables that transform raw metrics into actionable insights. This visibility is essential for understanding application health, optimizing resource utilization, and making data-driven decisions about system improvements.\nIn this section, you will learn how to:\nSelect and visualize specific metrics from your pre-configured applications Implement advanced metric search expressions to filter and display targeted data Perform metric math calculations to derive deeper insights such as aggregations, averages, and performance rankings Configure dynamic labels to enhance chart readability and interpretation üí° Pro Tip: When working with CloudWatch Metrics, focus on establishing baseline performance patterns first. This makes it easier to identify anomalies and troubleshoot issues when they arise. Consider using metric math to calculate the percentage change from your baseline for critical metrics.\nThis section includes:\nViewing Metrics Search Expressions Math Expressions Dynamic Labels "
},
{
	"uri": "/3-cloud-watch-metric/3.3-math-expression/",
	"title": "Math expressions",
	"tags": [],
	"description": "",
	"content": "Mathematical Expressions Continuing, in this section, we will perform basic mathematical expressions.\nFirst, clear the previous search expression. Go back to the Browse tab.\nClick Graph search to restore the graph from the previous step. Next, open the Add math section in the upper-right corner, below the graph.\nExpand Filter. Select Top 10 by sum. Now, we will reorder the graph based on the first search expression using the expression below. SORT(e1, SUM, DEC, 3) That\u0026rsquo;s it! In this section, we kept it simple. Let\u0026rsquo;s continue practicing in the next part.\n"
},
{
	"uri": "/4-cloud-watch-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "Amazon CloudWatch Logs ‚ÑπÔ∏è Information: Logs are an essential part of any AWS system, providing valuable insights such as:\nApplication activities and performance metrics User actions and access patterns System errors and exceptions Warning conditions requiring attention In this section, we will cover these fundamental CloudWatch Logs operations:\nViewing and analyzing logs in real-time Creating log groups/streams and performing advanced queries Implementing Metric Filters to extract quantifiable data from logs üí° Pro Tip: The skills learned in this section form the foundation for effective AWS monitoring and will be leveraged throughout later modules. We recommend thorough understanding of these concepts.\nüîí Security Note: CloudWatch Logs can contain sensitive information. Always follow AWS security best practices when configuring log retention and access permissions.\nAmazon CloudWatch Logs Basics CloudWatch Logs Insights Query Engine CloudWatch Metric Filters and Transformations "
},
{
	"uri": "/3-cloud-watch-metric/3.4-dynamic-label/",
	"title": "Dynamic Labels",
	"tags": [],
	"description": "",
	"content": "Dynamic Labels Until now, you may have noticed that the labels in the graph legend have never been updated. While you can manually edit them, doing so for multiple metrics is not ideal. In this section, we will explore how to automatically update labels without manual changes.\nClear the previous expressions. Remove all Filters and click All to return to the namespaces. Navigate to the CWAgent namespace. Select the following dimensions: ImageId, InstanceId, InstanceType, exe, process_name. In the search bar, enter the following:\nexe=cloudwatch MetricName=procstat_memory_rss (specifying the exact metric name). Click Graph search to display the graph. Switch to the Graphed metrics tab.\nExpand Add dynamic label. Expand All labels. Select PROP(\u0026lsquo;Dim.DimName\u0026rsquo;). You will see that the graph labels have been updated.\nModify the label expression as follows: ${PROP(\u0026#39;Dim.exe\u0026#39;)} - ${PROP(\u0026#39;Dim.InstanceId\u0026#39;)} - ${PROP(\u0026#39;MetricName\u0026#39;)} The labels are now displayed in the updated format.\n"
},
{
	"uri": "/5-cloud-watch-alarm/",
	"title": "CloudWatch Alarms",
	"tags": [],
	"description": "",
	"content": "Amazon CloudWatch Alarms ‚ÑπÔ∏è Information: CloudWatch Alarms monitor your metrics and trigger actions when thresholds are breached. They\u0026rsquo;re essential for proactive monitoring and automated responses to changing conditions in your AWS environment.\nFollow these steps to create an alarm for the error log metric we configured in the previous section:\nNavigate to the CloudWatch console:\nSelect Alarms from the left navigation pane Choose All alarms Click Create alarm Begin the metric selection process:\nClick Select metric Under Custom namespaces, select ec2-logs Select Metrics with no dimensions Choose /var/log/messages - ERROR metric Click Select metric Configure the metric parameters:\nSet Period to 1 minute for timely detection of error spikes Define the alarm conditions:\nThreshold type: Static Condition: Greater than 10 üí° Pro Tip: The dashed line represents your threshold boundary. When the metric crosses this line, the alarm will transition to the ALARM state, indicating unusual application behavior that requires immediate investigation.\nClick Next to continue Configure notification settings:\nAlarm state trigger: In alarm Select Create new topic Topic name: Error_logs_reach_10 Email to notify: enter your email address Click Create topic Click Next Name your alarm:\nEnter alarm name: PythonApplicationErrorAlarm Click Next Review and create:\nVerify all configurations Click Create alarm ‚ö†Ô∏è Warning: Your alarm will remain in the INSUFFICIENT_DATA state until Amazon SNS confirms your subscription and the metric receives data points.\nConfirm your SNS subscription:\nCheck your email for a message from AWS Notifications Click Confirm subscription üîí Security Note: Always confirm SNS subscriptions promptly to ensure you receive critical alerts. Consider using Amazon SNS with AWS Lambda for automated remediation of issues detected by CloudWatch Alarms.\nYour CloudWatch Alarm is now fully configured and will monitor your application for error spikes, notifying you when the threshold is exceeded.\n"
},
{
	"uri": "/6-cloud-watch-dashboard/",
	"title": "CloudWatch Dashboards",
	"tags": [],
	"description": "",
	"content": "Amazon CloudWatch Dashboards ‚ÑπÔ∏è Information: CloudWatch Dashboards provide a customizable home page in the CloudWatch console that you can use to monitor your resources across multiple regions. Dashboards allow you to create a unified view of the metrics and alarms that matter most to your operations.\nIn this final section of the workshop, we\u0026rsquo;ll create a comprehensive dashboard to visualize the metrics and alarms we\u0026rsquo;ve configured throughout the previous modules, with special focus on the error log monitoring we established.\nAdd the alarm we created to the dashboard:\nSelect PythonApplicationErrorAlarm Expand Actions Select Add to dashboard In the Add to dashboard dialog:\nSelect Create new Configure your new dashboard:\nEnter dashboard name: CloudWatch-Workshop Click Create Click Add to dashboard üí° Pro Tip: Dashboards support cross-region monitoring, allowing you to track resources deployed across your global AWS infrastructure from a single view.\nYour completed dashboard should now display the alarm widget:\n‚ÑπÔ∏è Information: Dashboard widgets are highly customizable. You can:\nResize and reposition widgets by dragging Edit widget properties to change visualization types Add text annotations for context Share dashboards with your team üîí Security Note: Consider using AWS Identity and Access Management (IAM) to control who can view or modify your dashboards, especially when they contain sensitive operational metrics.\nCongratulations on completing this workshop! You\u0026rsquo;ve successfully implemented a comprehensive monitoring solution using Amazon CloudWatch\u0026rsquo;s powerful features for metrics, logs, alarms, and dashboards.\n"
},
{
	"uri": "/7-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Resource Cleanup ‚ÑπÔ∏è Information: Properly cleaning up AWS resources after completing this workshop prevents unexpected charges on your AWS account while allowing you to retain valuable monitoring data for future reference.\nFollow these steps to remove all workshop resources:\nNavigate to AWS CloudFormation:\nIn the AWS Management Console search bar, type CloudFormation Select CloudFormation from the results Delete the CloudFormation stack:\nSelect the stack you created for this workshop Click Delete to initiate the deletion process Confirm the deletion:\nReview the resources that will be deleted Click Delete to confirm üí° Pro Tip: CloudFormation handles the deletion of all resources in the correct order, ensuring proper cleanup without manual intervention.\nMonitor the deletion process:\nThe stack status will change to \u0026ldquo;DELETE_IN_PROGRESS\u0026rdquo; Wait for the stack to be completely removed from the list ‚ö†Ô∏è Warning: While the infrastructure resources will be deleted immediately, CloudWatch Metrics and Logs data will remain available for up to 15 months according to the default retention policy, which may incur minimal storage costs.\nüîí Security Note: Consider reviewing your CloudWatch Logs retention policies for production environments to balance compliance requirements with cost optimization.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
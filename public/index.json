[
{
	"uri": "/",
	"title": "AWS CloudWatch Workshop",
	"tags": [],
	"description": "",
	"content": "AWS CloudWatch Workshop Overview Amazon CloudWatch is a monitoring and management service that provides action-oriented data and information for AWS application and infrastructure resources, hybrid and on-premises applications. You can collect and access all performance and operational data in the form of logs and metrics in the same platform, instead of monitoring in silos (servers, networks, or databases). CloudWatch allows you to monitor end-to-end (applications, infrastructure, and services) and leverage alerts, logs, and event data to take action automatically and reduce average processing time (MTTR). This service helps you free up critical resources and focus on building applications and business value.\nCloudWatch provides action-oriented information, assisting in optimizing application performance, managing resource usage, and understanding the overall health of the system. CloudWatch displays detailed log and metric data down to the second, maintains data for 15 months (metric), and enables calculations on metrics. It also helps you with analytics based on stale data to optimize costs and collect real-time information that optimizes application and infrastructure resources. You can use CloudWatch Container Insights to monitor, troubleshoot, and alert the applications and microservices contained in your containers. CloudWatch collects, aggregates, and summarizes compute usage (such as CPU, memory, disk, and network data) as well as diagnostic information (such as container restart failures) to help DevOps engineers Isolate and resolve problems quickly. Container Insights gives you insights from container management services such as Amazon ECS for Kubernetes (EKS), Amazon Elastic Container Service (ECS), AWS Fargate, and standalone Kubernetes (k8s).\nContent Introduction Preparation steps CloudWatch Metric CloudWatch Logs CloudWatch Alarm CloudWatch Dashboard Cleanup resources "
},
{
	"uri": "/4-cloud-watch-logs/4.1-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs On the main CloudWatch page:\nExpand the Logs menu on the left sidebar. Select Log groups. In the search bar, enter /ec2 and select /ec2/linux/var/log/messages. Choose any instance to view its logs. Here, you can see logs generated by the instance from various sources such as dhclient, NET, ec2net, systemd, and more. Go back to the /ec2/linux/var/log/messages log group details. Now, set up the log retention period.\nClick Actions. Select Edit retention setting. In the Retention setting, choose 1 week (7 days) for Expire events after. That\u0026rsquo;s it! These basic operations help you understand where logs in your instance originate from, including services and applications generating them.\n"
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview In this lab, we will practice working with Amazon CloudWatch through the following tasks:\nWorking with Metrics sent from sample applications running on pre-configured EC2 Instances. Viewing Logs also sent from these applications running on EC2 Instances, then creating Metrics from Logs. Creating Alarms from Metrics. Finally, adding Custom Metrics and Alarms to the CloudWatch Dashboard for better system monitoring. This workshop is suitable for those who are interested in System Administration and want to start using CloudWatch to monitor a simple system, providing a more intuitive view of System Monitoring and Observation.\n"
},
{
	"uri": "/3-cloud-watch-metric/3.1-view-metrics/",
	"title": "Viewing Metrics",
	"tags": [],
	"description": "",
	"content": "Viewing Metrics First, we will practice viewing metrics.\nAccess AWS Management Console Search for CloudWatch Select CloudWatch In the CloudWatch interface Expand the Metrics section in the left menu. Select All metrics. In the metrics dashboard, enter EC2 in the search bar. Once the results appear, select EC2 \u0026gt; Per-Instance Metrics. In the search bar, type CPUUtilization and search. By default, the search is performed by Metric name.\nAdd two out of the five instances created by the CloudFormation stack to observe their CPUUtilization metrics. Scroll down to view the data.\nFrom the graph, we can conclude:\nBoth instances started operating around 2:40 AM, which is also when they had the highest activity. By 3:30 AM, both instances seem to have completed their tasks. Viewing additional metrics for a single instance Deselect the line for Instance B. Remove the CPUUtilization filter. In the search bar, enter EBSWriteBytes and search. Scroll down and select Instance A. From this chart, we observe:\nInitially, there was a high volume of read/write operations to EBS, indicating that the instance was processing data. CPUUtilization and EBSWriteBytes follow a similar pattern, except at certain points where they diverge. This suggests that the application interacts with EBS mainly during startup but performs other tasks afterward. You can hide one of the metrics to analyze the data more clearly.\nHowever, we will take a better approach in the next section by customizing the charts for improved visualization.\nWorking with Charts In the previous step, our chart was difficult to interpret because both CPUUtilization and EBSWriteBytes were plotted on the same Y-axis. Now, we will separate them and add markers for better visualization.\nAdjusting the Y-axis Go to the Graphed metrics tab. Locate EBSWriteBytes, then under the Y-axis column, select \u0026gt;. The chart should now appear more readable. Adding a horizontal annotation (threshold marker) Go to the Options tab. Click Add horizontal annotation. Enter annotation details: Label: 5% Mark Value: 5 This adds a dashed line on the chart, labeled accordingly.\nAdding a vertical annotation (event marker) Create a Vertical annotation labeled Job start. A dashed vertical line appears on the chart. By default, the Job start marker is set at 2:16 AM, but this is incorrect. We need to adjust it.\nAdjusting the vertical annotation time: Hover over the Job start marker. The job actually started around 2:40 AM. Change the Date/Time for Job start to 2:40 AM. Click Apply to save changes. The Job start marker has now been repositioned.\nThat concludes our hands-on work with charts.\nIn the next section, we will focus on working with metric expressions. You can remove the markers before proceeding to the next step.\n"
},
{
	"uri": "/4-cloud-watch-logs/4.2-logs-insights/",
	"title": "CloudWatch Logs Insights",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs Insights Trong phần này, chúng ta sẽ tạo log từ một ứng dụng và sau đó truy vấn các log này trong CloudWatch Logs Insights. Mình sẽ chọn một EC2 instance làm mẫu.\nTrên thanh tìm kiếm dịch vụ:\nNhập EC2. Chọn EC2. Trong EC2 Console, truy cập vào trang Instances:\nChọn một instance bất kỳ (ở đây mình chọn Instance-A). Ấn chọn Connect. Trong trang Connect to instance:\nChuyển sang tab Session Manager. Nhấn Connect. Đợi một lúc, một Terminal sẽ hiện lên:\nDi chuyển vào thư mục /tmp. Tải xuống script Python từ S3 bucket. cd /tmp sudo aws s3 cp s3://workshop-template-bucket/logger.py . Cấp quyền thực thi và chạy script: sudo chmod +x logger.py python3 logger.py \u0026amp; Kiểm tra các logger đang chạy dưới dạng process: ps -aux | grep logger Hiện tại có 2 process đang chạy, chúng sẽ chạy cho đến khi kết thúc bài thực hành.\nIn ra các dòng log từ file /var/log/messages, nó sẽ chạy liên tục cho đến khi bị hủy: sudo tail -f /var/log/messages Trở lại CloudWatch Console, vào Logs Insights từ menu bên trái để truy vấn log. Trong Selection criteria, tìm /ec2 và chọn /ec2/linux/var/log/messages. Nhập câu truy vấn sau và nhấn Run query: fields @timestamp, @message\r| sort @timestamp desc\r| limit 20 Kết quả hiển thị như sau:\nĐây chính là các log chúng ta vừa tạo.\nTruy vấn log có chứa ERROR: fields @timestamp, @message\r| filter @message like /ERROR/\r| sort @timestamp desc\r| limit 20 Đây là các log lỗi mà chúng ta đã tạo.\nTruy vấn log có chứa WARN: fields @timestamp, @message\r| filter @message like /WARN/\r| sort @timestamp desc\r| limit 20 Truy vấn lại log lỗi để xem log mới tạo: Truy vấn theo từ khóa khác (eth0): fields @timestamp, @message\r| filter @message like /eth0/\r| sort @timestamp desc\r| stats count (*) by bin() Trực quan hóa truy vấn log Chúng ta có thể xem biểu đồ của các truy vấn bằng cách chuyển sang tab Visualization.\nLưu lệnh truy vấn Logs Insights hỗ trợ lưu truy vấn để sử dụng lại sau này.\nVí dụ, lưu truy vấn ERROR logs:\nQuay lại Logs Insights. Nhập lại truy vấn ERROR logs. Nhấn Save. Trong Save a new query, điền thông tin:\nQuery name: Errors Folder: cloudwatch-workshop (chọn Create new) Kiểm tra lại thông tin trong Query definition details. Nhấn Save. Lịch sử truy vấn Logs Insights cho phép xem lại lịch sử truy vấn. Trong giao diện, chọn History (dưới Query editor).\nTrong phần tiếp theo, chúng ta sẽ tạo Metrics Filter, chuyển log thành Metric, và thiết lập Alarm.\n"
},
{
	"uri": "/2-preparatory-steps/",
	"title": "Preparatory steps",
	"tags": [],
	"description": "",
	"content": "Preparation Steps Access the AWS Management Console:\nSearch for CloudFormation. Select CloudFormation. In the CloudFormation interface:\nSelect Create stack. Choose With new resources (standard). In the Create stack interface. First, download the template file, and then follow these steps:\nIn the Prerequisite - Prepare template section, choose Choose an existing template. Then, select Upload a template file. Click Choose file to upload the template file you just downloaded. Click Next. Next, fill in the following information:\nName: FCJ-CloudWatch-Workshop (or any name you prefer, but it’s a good idea to choose a memorable name). RegionId: select the region ID where you are performing the lab, for this lab, I chose us-east-1 (N. Virginia). Leave the remaining parameters as is. Click Next. On this page, no configuration is needed, so scroll down to the bottom, check I acknowledge that AWS CloudFormation might create IAM resources with custom names, and then click Next. Verify everything once more, scroll to the bottom, and click Submit to create the stack. A new stack will be created. Wait for about 5 minutes for the installation to complete. When the installation is finished, you should see the following result:\nThe preparation step is now complete. In the following steps, we will proceed with hands-on practice in CloudWatch.\n"
},
{
	"uri": "/3-cloud-watch-metric/3.2-search-expression/",
	"title": "Search expressions",
	"tags": [],
	"description": "",
	"content": "Search Expressions In the previous section, we manually viewed metrics, but this method has limitations and requires multiple interactions with different metrics. In this section, we can perform this more efficiently using Search Expressions.\nRemove all information from the old graph by clicking X or Clear graph. Return to the Browse tab\nRemove the EBSWriteBytes filter. Add CPUUtilization. Click Graph search. Go back to the Graphed metrics tab, where a new search expression has appeared in the Details column. Enter a new expression as shown below. This expression searches in a different Namespace outside EC2. Then, click Apply to apply the changes.\nIn the upper-right corner\nOpen the Line dropdown. Select Stacked area. Now, the graph is easier to read.\nSearch for the average memory usage percentage (Disk Used Percent) SEARCH(\u0026#34;disk_used_percent\u0026#34;, \u0026#39;Average\u0026#39;, 300) Search using the keyword \u0026ldquo;used\u0026rdquo; SEARCH(\u0026#34;used\u0026#34;, \u0026#39;Average\u0026#39;, 300) The results have changed slightly.\nOkay, so we have completed the basic search operations in CloudWatch Console. In the next section, we will perform simple calculations.\n"
},
{
	"uri": "/3-cloud-watch-metric/",
	"title": "CloudWatch Metric",
	"tags": [],
	"description": "",
	"content": "CloudWatch Metric When working with CloudWatch, our main task is to \u0026ldquo;observe.\u0026rdquo; CloudWatch provides intuitive charts and data tables to visualize Metrics. This is crucial as it reflects the health of the application/system we are operating, helping us make informed decisions on optimization and upgrades.\nIn this section, we will:\nSelect the metrics we want to view (from the applications we set up earlier). Perform advanced Metric searches to display data in charts. Conduct advanced Metric calculations to show additional insights such as totals, averages, and rankings of Metrics. Create Dynamic Labels to make chart annotations more intuitive. This section includes:\nViewing Metrics Search expressions Math expressions Dynamic Labels "
},
{
	"uri": "/4-cloud-watch-logs/4.3-metric-filter/",
	"title": "CloudWatch Metric Filter",
	"tags": [],
	"description": "",
	"content": "CloudWatch Metric Filter Return to the main screen of CloudWatch\nSelect Log groups Search for /ec2. Select /ec2/linux/var/log/messages In the interface of /ec2/linux/var/log/messages\nClick on Actions. Click Create metric filter. In the Define Pattern section, enter the following information:\nFilter pattern: select ERROR from the dropdown. Test pattern: select any instance, but it’s recommended to choose the instance where we created processes in the previous two steps. Click Test pattern to check if the filter works properly. In the Create filter name section of Assign metric, enter PythonAppErrors. In the Metric details section, enter the following information:\nMetric namespace: ec2-logs. Metric name: /var/log/messages - ERROR. Metric value: 1. Default value: 0. Unit: select Count from the dropdown. Click Next. After reviewing, click Create metric filter. Go back to Metrics \u0026gt; All metrics.\nSearch for the keywords /var/log/messages and ERROR. Select ec2-logs \u0026gt; Metrics with no dimensions. Now we have a metric that retrieves ERROR logs from the application. In the next step, we will set up an alarm for this metric.\n"
},
{
	"uri": "/3-cloud-watch-metric/3.3-math-expression/",
	"title": "Math expressions",
	"tags": [],
	"description": "",
	"content": "Mathematical Expressions Continuing, in this section, we will perform basic mathematical expressions.\nFirst, clear the previous search expression. Go back to the Browse tab.\nClick Graph search to restore the graph from the previous step. Next, open the Add math section in the upper-right corner, below the graph.\nExpand Filter. Select Top 10 by sum. Now, we will reorder the graph based on the first search expression using the expression below. SORT(e1, SUM, DEC, 3) That\u0026rsquo;s it! In this section, we kept it simple. Let\u0026rsquo;s continue practicing in the next part.\n"
},
{
	"uri": "/4-cloud-watch-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs Logs are an essential part of any system, providing valuable insights such as:\nApplication activities. Who performed what actions? Any errors occurring in the system? Any warnings that need attention? In this section, we will cover some fundamental operations:\nViewing logs. Creating logs and querying logs. Creating Log Filters and extracting Metrics from logs. These operations will also be used in later sections, so make sure to go through this part carefully and thoroughly.\nCloudWatch Logs CloudWatch Logs Insights CloudWatch Metric Filter "
},
{
	"uri": "/3-cloud-watch-metric/3.4-dynamic-label/",
	"title": "Dynamic Labels",
	"tags": [],
	"description": "",
	"content": "Dynamic Labels Until now, you may have noticed that the labels in the graph legend have never been updated. While you can manually edit them, doing so for multiple metrics is not ideal. In this section, we will explore how to automatically update labels without manual changes.\nClear the previous expressions. Remove all Filters and click All to return to the namespaces. Navigate to the CWAgent namespace. Select the following dimensions: ImageId, InstanceId, InstanceType, exe, process_name. In the search bar, enter the following:\nexe=cloudwatch MetricName=procstat_memory_rss (specifying the exact metric name). Click Graph search to display the graph. Switch to the Graphed metrics tab.\nExpand Add dynamic label. Expand All labels. Select PROP(\u0026lsquo;Dim.DimName\u0026rsquo;). You will see that the graph labels have been updated.\nModify the label expression as follows: ${PROP(\u0026#39;Dim.exe\u0026#39;)} - ${PROP(\u0026#39;Dim.InstanceId\u0026#39;)} - ${PROP(\u0026#39;MetricName\u0026#39;)} The labels are now displayed in the updated format.\n"
},
{
	"uri": "/5-cloud-watch-alarm/",
	"title": "CloudWatch Alarms",
	"tags": [],
	"description": "",
	"content": "CloudWatch Alarms In this section, we will set up an Alarm for the Error Log Metric that we created in the previous section.\nReturn to the main screen of CloudWatch.\nSelect Alarms from the left menu. Choose All alarms. Click Create alarm. Select Select metric. The metrics window appears, under Custom namespaces, select ec2-logs.\nNext, select Metrics with no dimensions, choose /var/log/messages, and click Select metric.\nIn the Specify metric and conditions section, set Period to 1 minute. In the Conditions section:\nThreshold type: Static. Condition: Greater than 10. You will see a dashed line indicating that this is the threshold where the Alarm will be triggered =\u0026gt; when there are too many errors, something unusual has happened in the application and needs to be checked immediately.\nThen click Next to continue.\nNow, configure the notification as follows:\nAlarm state trigger: In alarm. Choose Create new topic. Topic name: Error_logs_reach_10. Email to notify: enter your email, here I will enter mine. Click Create topic. Click Next.\nIn the final step, enter the alarm name as PythonApplicationErrorAlarm and click Next. Review the results and click Create alarm. Result:\nLog in to Gmail or any email service you use. You will receive an email from AWS Notification. Click Confirm subscription.\nOkay, now we have completed the alarm setup.\n"
},
{
	"uri": "/6-cloud-watch-dashboard/",
	"title": "CloudWatch Dashboards",
	"tags": [],
	"description": "",
	"content": "CloudWatch Dashboards This is the final part of this workshop, where we will create a simple Dashboard to manage the Metrics and Alarms we have created, specifically the Error Logs we created in the previous section.\nAdd the alarm we just created to the Dashboard.\nSelect PythonApplicationErrorAlarm. Expand Actions. Select Add to dashboard. In the Add to dashboard dialog, select Create new. Enter the name for the dashboard as CloudWatch-Workshop.\nClick Create. Click Add to dashboard. Here is our dashboard.\nYou can perform several actions on this widget.\nIf you\u0026rsquo;ve made it this far, congratulations on completing this workshop!\n"
},
{
	"uri": "/7-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources To clean up resources, you can simply go to the CloudFormation stack and delete the stack we created at the beginning of the tutorial. The Metrics and Logs will remain there for up to 15 months.\nIn the search bar:\nType CloudFormation. Select CloudFormation. Select the stack you created, then click Delete. Click Delete again to confirm deletion. The stack is being deleted. Wait for a while, and the stack will be removed.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]